geom_smooth(method = "loess", color = "grey20") +
geom_hline(yintercept = control_yint_day3, color = "grey50", linetype = "dashed", size = 1) +
# scale_color_manual(values=c("green4", "darkorange1", "purple"))+
theme(legend.position="right", legend.direction="vertical",
legend.title = element_blank())+ theme_bw() +
labs(x="Dose",
y= NA) + #scale_y_continuous(breaks=seq(0,100,20))+
ggtitle("Day 3") +
theme(panel.grid.major = element_blank(),
axis.title.y  = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
control_yint_day4          <- (SummaryStats %>% dplyr::filter(c(Date %in% 20251014 & Prime_treatment %in% '0_hours')))$Percent_Survival
Day4_hormetic_curve_MeanSE <-  ggplot(SummaryStats %>% dplyr::filter(Date %in% 20251014),
aes(x=as.numeric(gsub('_.*','',Prime_treatment)), y=Percent_Survival)) +
geom_point() +
geom_errorbar(aes(ymin = Percent_Survival - se, ymax = Percent_Survival + se), width = 0.2) +
geom_smooth(method = "loess", color = "grey20") +
geom_hline(yintercept = control_yint_day4, color = "grey50", linetype = "dashed", size = 1) +
# scale_color_manual(values=c("green4", "darkorange1", "purple"))+
theme(legend.position="right", legend.direction="vertical",
legend.title = element_blank())+ theme_bw() +
labs(x="",
y="Response")+ #scale_y_continuous(breaks=seq(0,100,20))+
ggtitle("Day 4") +
theme(panel.grid.major = element_blank(),
axis.title.y  = element_blank(),
# axis.title.x = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
hormetic_curve_MeanSE <- ggpubr::ggarrange(Day2_hormetic_curve_MeanSE,
Day3_hormetic_curve_MeanSE,
Day4_hormetic_curve_MeanSE,
nrow=1,
ncol = 3)
hormetic_curve_MeanSE
pdf("Output/survival_1weekrecovery_hormesis.pdf", width=8, height=5)
print(hormetic_curve_MeanSE)
dev.off()
KM_hormetic_curves <- ggpubr::ggarrange(KaplanMeier.plot,
hormetic_curve_MeanSE,
ncol=1,
nrow = 2)
KM_hormetic_curves
# plot the surv data
pdf("Output/survival_1weekrecovery_KaplanMeier.pdf", width=5, height = 4)
KM_hormetic_curves
dev.off()
# plot the surv data
pdf("Output/survival_1weekrecovery_KaplanMeier.pdf", width=8, height = 6)
KM_hormetic_curves
dev.off()
pdf("Output/survival_1weekrecovery_KaplanMeier.pdf", width=6, height = 8)
KM_hormetic_curves
dev.off()
knitr::opts_chunk$set(echo = TRUE)
# SET WORKING DIRECTORY
knitr::opts_knit$set(root.dir = "C:/Users/gurrs/Documents/Github_repositories/Cgigas_temperature_prime/RAnalysis") # Sam's work
library(ggplot2)
library(tidyr)
library(dplyr)
library(rcompanion)
library(FSA)
library(car)
library(forcats)
library(kableExtra) # nice Rmd tables
library(emmeans)
library(ggpubr)
library(survival)
library(Rmisc)
library(coxme)
library(survminer)
library(ggsurvfit) # survfit2
library(gtsummary) # tbl_survfit
# load the raw data, just the counts of dead individuals each day
df_raw       <- read.csv("Data/Survival/survival.csv", header = T)
knitr::opts_chunk$set(echo = TRUE)
# SET WORKING DIRECTORY
knitr::opts_knit$set(root.dir = "C:/Users/gurrs/Documents/Github_repositories/Cgigas_temperature_prime/RAnalysis") # Sam's work
# load the raw data, just the counts of dead individuals each day
df_raw       <- read.csv("Data/Survival/survival.csv", header = T)
#df_raw[df_raw == "all"] <- 0 # do this if all individuals are dead in any cells
df_raw       <- df_raw %>% na.omit() %>% mutate_at(2:ncol(df_raw), ~as.numeric(as.character(.)))
# load the stocking density data
df_stocking  <- read.csv("Data/Survival/stocking_density.csv", header = T)
# experiment metadata
df_metadata  <- read.csv("Data/experiment_metadata.csv", header = T)
# load the raw data, just the counts of dead individuals each day
# 24 hour recover, post challenge
df_stock_24hr     <- df_stocking %>%
filter(Date %in% '20251003_post_challenge') %>% # number per tank after the 44C exposure ad destrictive sampling
select_if(~ !any(is.na(.))) %>% # keep the 12 relevant tanks (tanks that were not challenged did not have mortality)
select(!Note)
df_surv_24hr      <- df_raw %>%
filter(Date >= 20251003) %>% # when the 24 hour exposure started
select(c('Date', colnames(df_stock_24hr)[2:ncol(df_stock_24hr)]))
# 24 hour recover, post challenge
df_stock_1wk     <- df_stocking %>%
filter(Date %in% '20251010_post_challenge') %>% # number per tank after the 44C exposure ad destrictive sampling
select_if(~ !any(is.na(.))) %>% # keep the 12 relevant tanks (tanks that were not challenged did not have mortality)
select(!Note)
df_surv_1wk      <- df_raw %>%
filter(Date >= 20251010) %>% # when the 24 hour exposure started
select(c('Date', colnames(df_stock_1wk)[2:ncol(df_stock_1wk)]))
# loop matrix, start this
loop_columns          <- data.frame(matrix(nrow = 1, ncol = 7))
colnames(loop_columns) <- c('Date', 'Tank_number', 'Treatment',
'Count_Alive', 'Count_Dead', 'Daily_Count_Dead', 'Percent_Survival') # names for comuns in the for loop
# output file from the for loops
df_cols <- data.frame()
df_out  <- data.frame() # output datafarme, start it here
# start the loop
for(r in 1:nrow(df_surv_1wk))  { # for each row
loop.date <- df_surv_1wk[r,1] # get the date
for (c in 2:ncol(df_surv_1wk)) { # at each date... call tank columns one by one
# df_raw[c] <- as.numeric(df_raw[c]) # convert to numeric
tankID         <- colnames(df_surv_1wk[c])
starting_count <- (df_stock_1wk %>% dplyr::select(`tankID`))[1,1]
cumulative.sum <- cumsum(df_surv_1wk[c]) # culative sum of the entire column c
cum.count.dead   <- cumulative.sum[r,] # the cumulative count dead at loop.date row r, column c
daily.count.dead <- df_surv_1wk[r,c]
count.alive      <- starting_count - cum.count.dead # all tanks started with 20 individuals!
percent.survival <- (count.alive/starting_count)*100
tank.num         <- as.numeric(gsub('.*_', '', colnames(df_surv_1wk[c])))
loop_columns$Date         <- loop.date
loop_columns$Tank_number  <- tank.num
loop_columns$Treatment     <- "1 week recovery"
# if(tank.num == 1 | tank.num == 2 | tank.num == 3) {
#  loop_columns$Treatment = "60 minutes"
# } else if (tank.num == 4 | tank.num == 5 | tank.num == 6) {
#   loop_columns$Treatment = "120 minutes"
# } else if (tank.num == 7 | tank.num == 8 | tank.num == 9 | tank.num == 10) {
#   loop_columns$Treatment = "180 minutes"
# } else {
#   loop_columns$Treatment = "30 minutes"
# }
loop_columns$Count_Alive           <- count.alive
loop_columns$Count_Dead            <- cum.count.dead # cumulative sum of count dead
loop_columns$Daily_Count_Dead      <- daily.count.dead # cumulative sum of count dead
loop_columns$Percent_Survival      <- percent.survival
df_cols      <- rbind(df_cols,loop_columns) #bind to a cumulative list dataframe
# Note: df_cols now contains as many rows as there are tank IDs at the given date loop.date
} # close columns for each tank
df_out      <- rbind(df_out,df_cols)
df_cols      <- data.frame() # start columns over again, gets the next row (date) for te previous loop
print(df_out) # print to monitor progress
} # close rows for each date - output cumulative table row by row for each tank
# View(df_out)
# load the raw data, just the counts of dead individuals each day
df_raw       <- read.csv("Data/Survival/survival.csv", header = T)
df_raw[df_raw == "all"] <- 0 # do this if all individuals are dead in any cells
df_raw       <- df_raw %>% na.omit() %>% mutate_at(2:ncol(df_raw), ~as.numeric(as.character(.)))
# load the stocking density data
df_stocking  <- read.csv("Data/Survival/stocking_density.csv", header = T)
# experiment metadata
df_metadata  <- read.csv("Data/experiment_metadata.csv", header = T)
# loop matrix, start this
loop_columns          <- data.frame(matrix(nrow = 1, ncol = 7))
colnames(loop_columns) <- c('Date', 'Tank_number', 'Treatment',
'Count_Alive', 'Count_Dead', 'Daily_Count_Dead', 'Percent_Survival') # names for comuns in the for loop
# output file from the for loops
df_cols <- data.frame()
df_out  <- data.frame() # output datafarme, start it here
# start the loop
for(r in 1:nrow(df_surv_1wk))  { # for each row
loop.date <- df_surv_1wk[r,1] # get the date
for (c in 2:ncol(df_surv_1wk)) { # at each date... call tank columns one by one
# df_raw[c] <- as.numeric(df_raw[c]) # convert to numeric
tankID         <- colnames(df_surv_1wk[c])
starting_count <- (df_stock_1wk %>% dplyr::select(`tankID`))[1,1]
cumulative.sum <- cumsum(df_surv_1wk[c]) # culative sum of the entire column c
cum.count.dead   <- cumulative.sum[r,] # the cumulative count dead at loop.date row r, column c
daily.count.dead <- df_surv_1wk[r,c]
count.alive      <- starting_count - cum.count.dead # all tanks started with 20 individuals!
percent.survival <- (count.alive/starting_count)*100
tank.num         <- as.numeric(gsub('.*_', '', colnames(df_surv_1wk[c])))
loop_columns$Date         <- loop.date
loop_columns$Tank_number  <- tank.num
loop_columns$Treatment     <- "1 week recovery"
# if(tank.num == 1 | tank.num == 2 | tank.num == 3) {
#  loop_columns$Treatment = "60 minutes"
# } else if (tank.num == 4 | tank.num == 5 | tank.num == 6) {
#   loop_columns$Treatment = "120 minutes"
# } else if (tank.num == 7 | tank.num == 8 | tank.num == 9 | tank.num == 10) {
#   loop_columns$Treatment = "180 minutes"
# } else {
#   loop_columns$Treatment = "30 minutes"
# }
loop_columns$Count_Alive           <- count.alive
loop_columns$Count_Dead            <- cum.count.dead # cumulative sum of count dead
loop_columns$Daily_Count_Dead      <- daily.count.dead # cumulative sum of count dead
loop_columns$Percent_Survival      <- percent.survival
df_cols      <- rbind(df_cols,loop_columns) #bind to a cumulative list dataframe
# Note: df_cols now contains as many rows as there are tank IDs at the given date loop.date
} # close columns for each tank
df_out      <- rbind(df_out,df_cols)
df_cols      <- data.frame() # start columns over again, gets the next row (date) for te previous loop
print(df_out) # print to monitor progress
} # close rows for each date - output cumulative table row by row for each tank
df_1week_complete <- merge(df_out, df_metadata, by = 'Tank_number')
df_1week_complete$Prime_treatment <-  factor(df_1week_complete$Prime_treatmen, levels = c("0_hours", "6_hours", "24_hours", "72_hours"))
# View(df_1week_complete)
SummaryStats <- summarySE(df_1week_complete, measurevar="Percent_Survival", groupvars=c("Prime_treatment", "Date")) %>%
dplyr::mutate(Day =
case_when(Date %in% 20251010 ~ 0,
Date %in% 20251011 ~ 1,
Date %in% 20251012 ~ 2,
Date %in% 20251013 ~ 3,
Date %in% 20251014 ~ 4))
# plot relative to 100$% restart at D stage
PlotMeanSE <-  ggplot(SummaryStats, aes(x=Day, y=Percent_Survival, color=Prime_treatment)) + geom_line()+
geom_point(position=position_dodge(.1))+
geom_errorbar(aes(ymin=Percent_Survival-se,
ymax=Percent_Survival+se), width=.2,
position=position_dodge(.1)) +
scale_color_manual(values = c("darkgreen","orange","darkorange2","darkred")) +
theme(legend.position="right", legend.direction="vertical",
legend.title = element_blank())+ theme_bw() +
labs(x="Day", y="Percent Survival")+ #scale_y_continuous(breaks=seq(0,100,20))+
ggtitle("") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
PlotMeanSE
write.csv(SummaryStats,"Output/survival_1weekrecovery_MeanSE.csv")
pdf("Output/survival_1weekrecovery_MeanSE.pdf", width=10, height=5)
print(PlotMeanSE)
dev.off()
control_yint_day2          <- (SummaryStats %>% dplyr::filter(c(Date %in% 20251012 & Prime_treatment %in% '0_hours')))$Percent_Survival
Day2_hormetic_curve_MeanSE <-  ggplot(SummaryStats %>% dplyr::filter(Date %in% 20251012),
aes(x=as.numeric(gsub('_.*','',Prime_treatment)), y=Percent_Survival)) +
geom_point() +
geom_errorbar(aes(ymin = Percent_Survival - se, ymax = Percent_Survival + se), width = 0.2) +
geom_smooth(method = "loess", color = "grey20") +
geom_hline(yintercept = control_yint_day2, color = "grey50", linetype = "dashed", size = 1) +
# scale_color_manual(values=c("green4", "darkorange1", "purple"))+
theme(legend.position="right", legend.direction="vertical",
legend.title = element_blank())+ theme_bw() +
labs(x="",
y="Response")+ #scale_y_continuous(breaks=seq(0,100,20))+
ggtitle("Day 2") +
theme(panel.grid.major = element_blank(),
# axis.title.x = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
control_yint_day3          <- (SummaryStats %>% dplyr::filter(c(Date %in% 20251013 & Prime_treatment %in% '0_hours')))$Percent_Survival
Day3_hormetic_curve_MeanSE <-  ggplot(SummaryStats %>% dplyr::filter(Date %in% 20251013),
aes(x=as.numeric(gsub('_.*','',Prime_treatment)), y=Percent_Survival)) +
geom_point() +
geom_errorbar(aes(ymin = Percent_Survival - se, ymax = Percent_Survival + se), width = 0.2) +
geom_smooth(method = "loess", color = "grey20") +
geom_hline(yintercept = control_yint_day3, color = "grey50", linetype = "dashed", size = 1) +
# scale_color_manual(values=c("green4", "darkorange1", "purple"))+
theme(legend.position="right", legend.direction="vertical",
legend.title = element_blank())+ theme_bw() +
labs(x="Dose",
y= NA) + #scale_y_continuous(breaks=seq(0,100,20))+
ggtitle("Day 3") +
theme(panel.grid.major = element_blank(),
axis.title.y  = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
control_yint_day4          <- (SummaryStats %>% dplyr::filter(c(Date %in% 20251014 & Prime_treatment %in% '0_hours')))$Percent_Survival
Day4_hormetic_curve_MeanSE <-  ggplot(SummaryStats %>% dplyr::filter(Date %in% 20251014),
aes(x=as.numeric(gsub('_.*','',Prime_treatment)), y=Percent_Survival)) +
geom_point() +
geom_errorbar(aes(ymin = Percent_Survival - se, ymax = Percent_Survival + se), width = 0.2) +
geom_smooth(method = "loess", color = "grey20") +
geom_hline(yintercept = control_yint_day4, color = "grey50", linetype = "dashed", size = 1) +
# scale_color_manual(values=c("green4", "darkorange1", "purple"))+
theme(legend.position="right", legend.direction="vertical",
legend.title = element_blank())+ theme_bw() +
labs(x="",
y="Response")+ #scale_y_continuous(breaks=seq(0,100,20))+
ggtitle("Day 4") +
theme(panel.grid.major = element_blank(),
axis.title.y  = element_blank(),
# axis.title.x = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
hormetic_curve_MeanSE <- ggpubr::ggarrange(Day2_hormetic_curve_MeanSE,
Day3_hormetic_curve_MeanSE,
Day4_hormetic_curve_MeanSE,
nrow=1,
ncol = 3)
hormetic_curve_MeanSE
# create new columns for live and dead based on the count and proportion (of alive) tobackcalculate dead - these are integers!
df_KM <- df_1week_complete %>%
dplyr::mutate(Count_Alive =
as.numeric(gsub(",","",Count_Alive))) %>% # remove the commas from these numbers- id as character if not removed!
dplyr::mutate(proportion = Percent_Survival/100,
Count_total = case_when(proportion == 0 ~ 0,
proportion >0 ~
(1/as.numeric(proportion))*
as.numeric(Count_Alive)))# %>% # proportion is that of alive
# Call the cumulative dataframe that we will write to in the for loop below
df_binary     <- data.frame() # start dataframe  - all
# run it
for (i in 1:nrow(df_KM)) {
#count_alive <- round(df_Exp2[i,]$Count_alive/100) # divide all counts by 1000, round to nearest
#count_dead  <- round(df_Exp2[i,]$Count_dead/100)  # divide all counts by 1000, round to nearest
count_alive <- round(df_KM[i,]$Count_Alive) # raw counts
count_dead  <- round(df_KM[i,]$Daily_Count_Dead)  # raw counts
loopDF           <- data.frame(matrix(0,ncol = 4, nrow = (count_alive + count_dead)))
colnames(loopDF) <- (c('Date','Treatment','Tank_number','Count_dead'))
loopDF           <- loopDF %>%
dplyr::mutate(
Treatment   = df_KM[i,]$Prime_treatment,
Tank_number = df_KM[i,]$Tank_number,
Date        = df_KM[i,]$Date)
loopDF[c(1:count_dead),4] = 1 # 1 for dead
loopDF[c((count_dead + 1):nrow(loopDF)),4] = 0 # 0 for alive
loopDF           <- data.frame(loopDF) # name dataframe for this single row
df_binary <- rbind(df_binary,loopDF) #bind to a cumulative list dataframe
}
# Call the cumulative dataframe that we will write to in the for loop below
df_binary     <- data.frame() # start dataframe  - all
# run it
for (i in 1:nrow(df_KM)) {
#count_alive <- round(df_Exp2[i,]$Count_alive/100) # divide all counts by 1000, round to nearest
#count_dead  <- round(df_Exp2[i,]$Count_dead/100)  # divide all counts by 1000, round to nearest
count_alive <- round(df_KM[i,]$Count_Alive) # raw counts
count_dead  <- round(df_KM[i,]$Daily_Count_Dead)  # raw counts
loopDF           <- data.frame(matrix(0,ncol = 4, nrow = (count_alive + count_dead)))
colnames(loopDF) <- (c('Date','Treatment','Tank_number','Count_dead'))
loopDF           <- loopDF %>%
dplyr::mutate(
Treatment   = df_KM[i,]$Prime_treatment,
Tank_number = df_KM[i,]$Tank_number,
Date        = df_KM[i,]$Date)
loopDF[c(1:count_dead),4] = 1 # 1 for dead
loopDF[c((count_dead + 1):nrow(loopDF)),4] = 0 # 0 for alive
loopDF           <- data.frame(loopDF) # name dataframe for this single row
df_binary <- rbind(df_binary,loopDF) #bind to a cumulative list dataframe
}
df_KM
# load the raw data, just the counts of dead individuals each day
df_raw       <- read.csv("Data/Survival/survival.csv", header = T)
df_raw[df_raw == "all"] <- 0 # do this if all individuals are dead in any cells
df_raw       <- df_raw %>% na.omit() %>% mutate_at(2:ncol(df_raw), ~as.numeric(as.character(.)))
df_raw
# load the stocking density data
df_stocking  <- read.csv("Data/Survival/stocking_density.csv", header = T)
# experiment metadata
df_metadata  <- read.csv("Data/experiment_metadata.csv", header = T)
# 24 hour recover, post challenge
df_stock_24hr     <- df_stocking %>%
filter(Date %in% '20251003_post_challenge') %>% # number per tank after the 44C exposure ad destrictive sampling
select_if(~ !any(is.na(.))) %>% # keep the 12 relevant tanks (tanks that were not challenged did not have mortality)
select(!Note)
df_surv_24hr      <- df_raw %>%
filter(Date >= 20251003) %>% # when the 24 hour exposure started
select(c('Date', colnames(df_stock_24hr)[2:ncol(df_stock_24hr)]))
# 24 hour recover, post challenge
df_stock_1wk     <- df_stocking %>%
filter(Date %in% '20251010_post_challenge') %>% # number per tank after the 44C exposure ad destrictive sampling
select_if(~ !any(is.na(.))) %>% # keep the 12 relevant tanks (tanks that were not challenged did not have mortality)
select(!Note)
df_surv_1wk      <- df_raw %>%
filter(Date >= 20251010) %>% # when the 24 hour exposure started
select(c('Date', colnames(df_stock_1wk)[2:ncol(df_stock_1wk)]))
# loop matrix, start this
loop_columns          <- data.frame(matrix(nrow = 1, ncol = 7))
colnames(loop_columns) <- c('Date', 'Tank_number', 'Treatment',
'Count_Alive', 'Count_Dead', 'Daily_Count_Dead', 'Percent_Survival') # names for comuns in the for loop
# output file from the for loops
df_cols <- data.frame()
df_out  <- data.frame() # output datafarme, start it here
# start the loop
for(r in 1:nrow(df_surv_1wk))  { # for each row
loop.date <- df_surv_1wk[r,1] # get the date
for (c in 2:ncol(df_surv_1wk)) { # at each date... call tank columns one by one
# df_raw[c] <- as.numeric(df_raw[c]) # convert to numeric
tankID         <- colnames(df_surv_1wk[c])
starting_count <- (df_stock_1wk %>% dplyr::select(`tankID`))[1,1]
cumulative.sum <- cumsum(df_surv_1wk[c]) # culative sum of the entire column c
cum.count.dead   <- cumulative.sum[r,] # the cumulative count dead at loop.date row r, column c
daily.count.dead <- df_surv_1wk[r,c]
count.alive      <- starting_count - cum.count.dead # all tanks started with 20 individuals!
percent.survival <- (count.alive/starting_count)*100
tank.num         <- as.numeric(gsub('.*_', '', colnames(df_surv_1wk[c])))
loop_columns$Date         <- loop.date
loop_columns$Tank_number  <- tank.num
loop_columns$Treatment     <- "1 week recovery"
# if(tank.num == 1 | tank.num == 2 | tank.num == 3) {
#  loop_columns$Treatment = "60 minutes"
# } else if (tank.num == 4 | tank.num == 5 | tank.num == 6) {
#   loop_columns$Treatment = "120 minutes"
# } else if (tank.num == 7 | tank.num == 8 | tank.num == 9 | tank.num == 10) {
#   loop_columns$Treatment = "180 minutes"
# } else {
#   loop_columns$Treatment = "30 minutes"
# }
loop_columns$Count_Alive           <- count.alive
loop_columns$Count_Dead            <- cum.count.dead # cumulative sum of count dead
loop_columns$Daily_Count_Dead      <- daily.count.dead # cumulative sum of count dead
loop_columns$Percent_Survival      <- percent.survival
df_cols      <- rbind(df_cols,loop_columns) #bind to a cumulative list dataframe
# Note: df_cols now contains as many rows as there are tank IDs at the given date loop.date
} # close columns for each tank
df_out      <- rbind(df_out,df_cols)
df_cols      <- data.frame() # start columns over again, gets the next row (date) for te previous loop
print(df_out) # print to monitor progress
} # close rows for each date - output cumulative table row by row for each tank
df_1week_complete <- merge(df_out, df_metadata, by = 'Tank_number')
df_1week_complete$Prime_treatment <-  factor(df_1week_complete$Prime_treatmen, levels = c("0_hours", "6_hours", "24_hours", "72_hours"))
# View(df_1week_complete)
SummaryStats <- summarySE(df_1week_complete, measurevar="Percent_Survival", groupvars=c("Prime_treatment", "Date")) %>%
dplyr::mutate(Day =
case_when(Date %in% 20251010 ~ 0,
Date %in% 20251011 ~ 1,
Date %in% 20251012 ~ 2,
Date %in% 20251013 ~ 3,
Date %in% 20251014 ~ 4))
SummaryStats
# View(df_1week_complete)
SummaryStats <- summarySE(df_1week_complete, measurevar="Percent_Survival", groupvars=c("Prime_treatment", "Date")) %>%
dplyr::mutate(Day =
case_when(Date %in% 20251010 ~ 0,
Date %in% 20251011 ~ 1,
Date %in% 20251012 ~ 2,
Date %in% 20251013 ~ 3,
Date %in% 20251014 ~ 4,
Date %in% 20251015 ~ 5))
# plot relative to 100$% restart at D stage
PlotMeanSE <-  ggplot(SummaryStats, aes(x=Day, y=Percent_Survival, color=Prime_treatment)) + geom_line()+
geom_point(position=position_dodge(.1))+
geom_errorbar(aes(ymin=Percent_Survival-se,
ymax=Percent_Survival+se), width=.2,
position=position_dodge(.1)) +
scale_color_manual(values = c("darkgreen","orange","darkorange2","darkred")) +
theme(legend.position="right", legend.direction="vertical",
legend.title = element_blank())+ theme_bw() +
labs(x="Day", y="Percent Survival")+ #scale_y_continuous(breaks=seq(0,100,20))+
ggtitle("") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
PlotMeanSE
control_yint_day1          <- (SummaryStats %>% dplyr::filter(c(Date %in% 20251011 & Prime_treatment %in% '0_hours')))$Percent_Survival
Day1_hormetic_curve_MeanSE <-  ggplot(SummaryStats %>% dplyr::filter(Date %in% 20251011),
aes(x=as.numeric(gsub('_.*','',Prime_treatment)), y=Percent_Survival)) +
geom_point() +
geom_errorbar(aes(ymin = Percent_Survival - se, ymax = Percent_Survival + se), width = 0.2) +
geom_smooth(method = "loess", color = "grey20") +
geom_hline(yintercept = control_yint_day2, color = "grey50", linetype = "dashed", size = 1) +
# scale_color_manual(values=c("green4", "darkorange1", "purple"))+
theme(legend.position="right", legend.direction="vertical",
legend.title = element_blank())+ theme_bw() +
labs(x="",
y="Response")+ #scale_y_continuous(breaks=seq(0,100,20))+
ggtitle("Day 2") +
theme(panel.grid.major = element_blank(),
# axis.title.x = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
Day1_hormetic_curve_MeanSE
control_yint_day1          <- (SummaryStats %>% dplyr::filter(c(Date %in% 20251011 & Prime_treatment %in% '0_hours')))$Percent_Survival
Day1_hormetic_curve_MeanSE <-  ggplot(SummaryStats %>% dplyr::filter(Date %in% 20251011),
aes(x=as.numeric(gsub('_.*','',Prime_treatment)), y=Percent_Survival)) +
geom_point() +
geom_errorbar(aes(ymin = Percent_Survival - se, ymax = Percent_Survival + se), width = 0.2) +
geom_smooth(method = "loess", color = "grey20") +
geom_hline(yintercept = control_yint_day1, color = "grey50", linetype = "dashed", size = 1) +
# scale_color_manual(values=c("green4", "darkorange1", "purple"))+
theme(legend.position="right", legend.direction="vertical",
legend.title = element_blank())+ theme_bw() +
labs(x="",
y="Response")+ #scale_y_continuous(breaks=seq(0,100,20))+
ggtitle("Day 2") +
theme(panel.grid.major = element_blank(),
# axis.title.x = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
Day1_hormetic_curve_MeanSE
control_yint_day1          <- (SummaryStats %>% dplyr::filter(c(Date %in% 20251011 & Prime_treatment %in% '0_hours')))$Percent_Survival
Day1_hormetic_curve_MeanSE <-  ggplot(SummaryStats %>% dplyr::filter(Date %in% 20251011),
aes(x=as.numeric(gsub('_.*','',Prime_treatment)), y=Percent_Survival)) +
geom_point() +
geom_errorbar(aes(ymin = Percent_Survival - se, ymax = Percent_Survival + se), width = 0.2) +
geom_smooth(method = "loess", color = "grey20") +
geom_hline(yintercept = control_yint_day1, color = "grey50", linetype = "dashed", size = 1) +
# scale_color_manual(values=c("green4", "darkorange1", "purple"))+
theme(legend.position="right", legend.direction="vertical",
legend.title = element_blank())+ theme_bw() +
labs(x="",
y="Response")+ #scale_y_continuous(breaks=seq(0,100,20))+
ggtitle("Day 1") +
theme(panel.grid.major = element_blank(),
# axis.title.x = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
Day1_hormetic_curve_MeanSE
Day4_hormetic_curve_MeanSE
Day3_hormetic_curve_MeanSE
Day2_hormetic_curve_MeanSE
hormetic_curve_MeanSE <- ggpubr::ggarrange(Day2_hormetic_curve_MeanSE,
Day3_hormetic_curve_MeanSE,
Day4_hormetic_curve_MeanSE,
nrow=1,
ncol = 3)
hormetic_curve_MeanSE
