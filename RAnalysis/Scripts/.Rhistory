for (i in 1:nrow(df_KM)) {
#count_alive <- round(df_Exp2[i,]$Count_alive/100) # divide all counts by 1000, round to nearest
#count_dead  <- round(df_Exp2[i,]$Count_dead/100)  # divide all counts by 1000, round to nearest
count_alive <- round(df_KM[i,]$Count_Alive) # raw counts
count_dead  <- round(df_KM[i,]$Daily_Count_Dead)  # raw counts
loopDF           <- data.frame(matrix(0,ncol = 4, nrow = (count_alive + count_dead)))
colnames(loopDF) <- (c('Date','Treatment','Tank_number','Count_dead'))
loopDF           <- loopDF %>%
dplyr::mutate(
Treatment   = df_KM[i,]$Prime_treatment,
Tank_number = df_KM[i,]$Tank_number,
Date        = df_KM[i,]$Date)
loopDF[c(1:count_dead),4] = 1 # 1 for dead
loopDF[c((count_dead + 1):nrow(loopDF)),4] = 0 # 0 for alive
loopDF           <- data.frame(loopDF) # name dataframe for this single row
df_binary <- rbind(df_binary,loopDF) #bind to a cumulative list dataframe
}
# (1) Including tank - to use as surv object in coxme statistics (random factor included!) not suitable for plotting
# Call the cumulative dataframe that we will write to in the for loop below
df_binary_1wk     <- data.frame() # start dataframe  - all
# run it
for (i in 1:nrow(df_KM_1wk)) {
#count_alive <- round(df_Exp2[i,]$Count_alive/100) # divide all counts by 1000, round to nearest
#count_dead  <- round(df_Exp2[i,]$Count_dead/100)  # divide all counts by 1000, round to nearest
count_alive <- round(df_KM_1wk[i,]$Count_Alive) # raw counts
count_dead  <- round(df_KM_1wk[i,]$Daily_Count_Dead)  # raw counts
loopDF           <- data.frame(matrix(0,ncol = 4, nrow = (count_alive + count_dead)))
colnames(loopDF) <- (c('Date','Treatment','Tank_number','Count_dead'))
loopDF           <- loopDF %>%
dplyr::mutate(
Treatment   = df_KM[i,]$Prime_treatment,
Tank_number = df_KM[i,]$Tank_number,
Date        = df_KM[i,]$Date)
loopDF[c(1:count_dead),4] = 1 # 1 for dead
loopDF[c((count_dead + 1):nrow(loopDF)),4] = 0 # 0 for alive
loopDF           <- data.frame(loopDF) # name dataframe for this single row
df_binary_1wk <- rbind(df_binary_1wk,loopDF) #bind to a cumulative list dataframe
}
# create new columns for live and dead based on the count and proportion (of alive) tobackcalculate dead - these are integers!
df_KM_1wk <- df_1week_complete %>%
dplyr::mutate(Count_Alive =
as.numeric(gsub(",","",Count_Alive))) %>% # remove the commas from these numbers- id as character if not removed!
dplyr::mutate(proportion = Percent_Survival/100,
Count_total = case_when(proportion == 0 ~ 0,
proportion >0 ~
(1/as.numeric(proportion))*
as.numeric(Count_Alive)))# %>% # proportion is that of alive
df_1week_complete <- merge(df_out, df_metadata, by = 'Tank_number')
df_1week_complete <- merge(df_out_1wk, df_metadata, by = 'Tank_number')
df_1week_complete$Prime_treatment <-  factor(df_1week_complete$Prime_treatmen, levels = c("0_hours", "6_hours", "24_hours", "72_hours"))
# create new columns for live and dead based on the count and proportion (of alive) tobackcalculate dead - these are integers!
df_KM_1wk <- df_1week_complete %>%
dplyr::mutate(Count_Alive =
as.numeric(gsub(",","",Count_Alive))) %>% # remove the commas from these numbers- id as character if not removed!
dplyr::mutate(proportion = Percent_Survival/100,
Count_total = case_when(proportion == 0 ~ 0,
proportion >0 ~
(1/as.numeric(proportion))*
as.numeric(Count_Alive)))# %>% # proportion is that of alive
# Call the cumulative dataframe that we will write to in the for loop below
df_binary_1wk     <- data.frame() # start dataframe  - all
# run it
for (i in 1:nrow(df_KM_1wk)) {
#count_alive <- round(df_Exp2[i,]$Count_alive/100) # divide all counts by 1000, round to nearest
#count_dead  <- round(df_Exp2[i,]$Count_dead/100)  # divide all counts by 1000, round to nearest
count_alive <- round(df_KM_1wk[i,]$Count_Alive) # raw counts
count_dead  <- round(df_KM_1wk[i,]$Daily_Count_Dead)  # raw counts
loopDF           <- data.frame(matrix(0,ncol = 4, nrow = (count_alive + count_dead)))
colnames(loopDF) <- (c('Date','Treatment','Tank_number','Count_dead'))
loopDF           <- loopDF %>%
dplyr::mutate(
Treatment   = df_KM[i,]$Prime_treatment,
Tank_number = df_KM[i,]$Tank_number,
Date        = df_KM[i,]$Date)
loopDF[c(1:count_dead),4] = 1 # 1 for dead
loopDF[c((count_dead + 1):nrow(loopDF)),4] = 0 # 0 for alive
loopDF           <- data.frame(loopDF) # name dataframe for this single row
df_binary_1wk <- rbind(df_binary_1wk,loopDF) #bind to a cumulative list dataframe
}
# run it
for (i in 1:nrow(df_KM_1wk)) {
#count_alive <- round(df_Exp2[i,]$Count_alive/100) # divide all counts by 1000, round to nearest
#count_dead  <- round(df_Exp2[i,]$Count_dead/100)  # divide all counts by 1000, round to nearest
count_alive <- round(df_KM_1wk[i,]$Count_Alive) # raw counts
count_dead  <- round(df_KM_1wk[i,]$Daily_Count_Dead)  # raw counts
loopDF           <- data.frame(matrix(0,ncol = 4, nrow = (count_alive + count_dead)))
colnames(loopDF) <- (c('Date','Treatment','Tank_number','Count_dead'))
loopDF           <- loopDF %>%
dplyr::mutate(
Treatment   = df_KM_1wk[i,]$Prime_treatment,
Tank_number = df_KM_1wk[i,]$Tank_number,
Date        = df_KM_1wk[i,]$Date)
loopDF[c(1:count_dead),4] = 1 # 1 for dead
loopDF[c((count_dead + 1):nrow(loopDF)),4] = 0 # 0 for alive
loopDF           <- data.frame(loopDF) # name dataframe for this single row
df_binary_1wk <- rbind(df_binary_1wk,loopDF) #bind to a cumulative list dataframe
}
# Call the cumulative dataframe that we will write to in the for loop below
df_binary_1wk     <- data.frame() # start dataframe  - all
# run it
for (i in 1:nrow(df_KM_1wk)) {
#count_alive <- round(df_Exp2[i,]$Count_alive/100) # divide all counts by 1000, round to nearest
#count_dead  <- round(df_Exp2[i,]$Count_dead/100)  # divide all counts by 1000, round to nearest
count_alive <- round(df_KM_1wk[i,]$Count_Alive) # raw counts
count_dead  <- round(df_KM_1wk[i,]$Daily_Count_Dead)  # raw counts
loopDF           <- data.frame(matrix(0,ncol = 4, nrow = (count_alive + count_dead)))
colnames(loopDF) <- (c('Date','Treatment','Tank_number','Count_dead'))
loopDF           <- loopDF %>%
dplyr::mutate(
Treatment   = df_KM_1wk[i,]$Prime_treatment,
Tank_number = df_KM_1wk[i,]$Tank_number,
Date        = df_KM_1wk[i,]$Date)
loopDF[c(1:count_dead),4] = 1 # 1 for dead
loopDF[c((count_dead + 1):nrow(loopDF)),4] = 0 # 0 for alive
loopDF           <- data.frame(loopDF) # name dataframe for this single row
df_binary_1wk <- rbind(df_binary_1wk,loopDF) #bind to a cumulative list dataframe
}
df_binary_1wk
df_KM_1wk
# loop matrix, start this
loop_columns          <- data.frame(matrix(nrow = 1, ncol = 7))
colnames(loop_columns) <- c('Date', 'Tank_number', 'Treatment',
'Count_Alive', 'Count_Dead', 'Daily_Count_Dead', 'Percent_Survival') # names for comuns in the for loop
# output file from the for loops
df_cols <- data.frame()
df_out  <- data.frame() # output datafarme, start it here
# start the loop
for(r in 1:nrow(df_surv_1wk))  { # for each row
loop.date <- df_surv_1wk[r,1] # get the date
for (c in 2:ncol(df_surv_1wk)) { # at each date... call tank columns one by one
# df_raw[c] <- as.numeric(df_raw[c]) # convert to numeric
tankID         <- colnames(df_surv_1wk[c])
starting_count <- (df_stock_1wk %>% dplyr::select(`tankID`))[1,1]
cumulative.sum <- cumsum(df_surv_1wk[c]) # culative sum of the entire column c
cum.count.dead   <- cumulative.sum[r,] # the cumulative count dead at loop.date row r, column c
daily.count.dead <- df_surv_1wk[r,c]
count.alive      <- starting_count - cum.count.dead # all tanks started with 20 individuals!
percent.survival <- (count.alive/starting_count)*100
tank.num         <- as.numeric(gsub('.*_', '', colnames(df_surv_1wk[c])))
loop_columns$Date         <- loop.date
loop_columns$Tank_number  <- tank.num
loop_columns$Treatment     <- "1 week recovery"
# if(tank.num == 1 | tank.num == 2 | tank.num == 3) {
#  loop_columns$Treatment = "60 minutes"
# } else if (tank.num == 4 | tank.num == 5 | tank.num == 6) {
#   loop_columns$Treatment = "120 minutes"
# } else if (tank.num == 7 | tank.num == 8 | tank.num == 9 | tank.num == 10) {
#   loop_columns$Treatment = "180 minutes"
# } else {
#   loop_columns$Treatment = "30 minutes"
# }
loop_columns$Count_Alive           <- count.alive
loop_columns$Count_Dead            <- cum.count.dead # cumulative sum of count dead
loop_columns$Daily_Count_Dead      <- daily.count.dead # cumulative sum of count dead
loop_columns$Percent_Survival      <- percent.survival
df_cols      <- rbind(df_cols,loop_columns) #bind to a cumulative list dataframe
# Note: df_cols now contains as many rows as there are tank IDs at the given date loop.date
} # close columns for each tank
df_out_1wk   <- rbind(df_out,df_cols)
df_cols      <- data.frame() # start columns over again, gets the next row (date) for te previous loop
print(df_out_1wk) # print to monitor progress
} # close rows for each date - output cumulative table row by row for each tank
df_1week_complete <- merge(df_out_1wk, df_metadata, by = 'Tank_number')
df_1week_complete$Prime_treatment <-  factor(df_1week_complete$Prime_treatmen, levels = c("0_hours", "6_hours", "24_hours", "72_hours"))
df_1week_complete
df_out_1wk
# loop matrix, start this
loop_columns          <- data.frame(matrix(nrow = 1, ncol = 7))
colnames(loop_columns) <- c('Date', 'Tank_number', 'Treatment',
'Count_Alive', 'Count_Dead', 'Daily_Count_Dead', 'Percent_Survival') # names for comuns in the for loop
# output file from the for loops
df_cols <- data.frame()
df_out  <- data.frame() # output datafarme, start it here
# start the loop
for(r in 1:nrow(df_surv_1wk))  { # for each row
loop.date <- df_surv_1wk[r,1] # get the date
for (c in 2:ncol(df_surv_1wk)) { # at each date... call tank columns one by one
# df_raw[c] <- as.numeric(df_raw[c]) # convert to numeric
tankID         <- colnames(df_surv_1wk[c])
starting_count <- (df_stock_1wk %>% dplyr::select(`tankID`))[1,1]
cumulative.sum <- cumsum(df_surv_1wk[c]) # culative sum of the entire column c
cum.count.dead   <- cumulative.sum[r,] # the cumulative count dead at loop.date row r, column c
daily.count.dead <- df_surv_1wk[r,c]
count.alive      <- starting_count - cum.count.dead # all tanks started with 20 individuals!
percent.survival <- (count.alive/starting_count)*100
tank.num         <- as.numeric(gsub('.*_', '', colnames(df_surv_1wk[c])))
loop_columns$Date         <- loop.date
loop_columns$Tank_number  <- tank.num
loop_columns$Treatment     <- "1 week recovery"
# if(tank.num == 1 | tank.num == 2 | tank.num == 3) {
#  loop_columns$Treatment = "60 minutes"
# } else if (tank.num == 4 | tank.num == 5 | tank.num == 6) {
#   loop_columns$Treatment = "120 minutes"
# } else if (tank.num == 7 | tank.num == 8 | tank.num == 9 | tank.num == 10) {
#   loop_columns$Treatment = "180 minutes"
# } else {
#   loop_columns$Treatment = "30 minutes"
# }
loop_columns$Count_Alive           <- count.alive
loop_columns$Count_Dead            <- cum.count.dead # cumulative sum of count dead
loop_columns$Daily_Count_Dead      <- daily.count.dead # cumulative sum of count dead
loop_columns$Percent_Survival      <- percent.survival
df_cols      <- rbind(df_cols,loop_columns) #bind to a cumulative list dataframe
# Note: df_cols now contains as many rows as there are tank IDs at the given date loop.date
} # close columns for each tank
df_out_1wk   <- rbind(df_out,df_cols)
df_cols      <- data.frame() # start columns over again, gets the next row (date) for te previous loop
print(df_out_1wk) # print to monitor progress
} # close rows for each date - output cumulative table row by row for each tank
df_out_1wk
# 1 week recovery, post challenge
df_stock_1wk     <- df_stocking %>%
filter(Date %in% '20251010_post_challenge') %>% # number per tank after the 44C exposure ad destructive sampling
select_if(~ !any(is.na(.))) %>% # keep the 12 relevant tanks (tanks that were not challenged did not have mortality)
select(!Note)
df_surv_1wk      <- df_raw %>%
filter(Date >= 20251010) %>% # when the 24 hour exposure started
select(c('Date', colnames(df_stock_1wk)[2:ncol(df_stock_1wk)]))
df_surv_1wk
df_surv_1wk      <- df_raw %>%
filter(Date >= 20251010 & Date <= 20251017) %>% # when the 24 hour exposure started
select(c('Date', colnames(df_stock_1wk)[2:ncol(df_stock_1wk)]))
df_surv_1wk
df_surv_1wk      <- df_raw %>%
filter(Date >= 20251010 & Date <= 20251016) %>% # when the 24 hour exposure started
select(c('Date', colnames(df_stock_1wk)[2:ncol(df_stock_1wk)]))
# 1 week recovery, post challenge
df_stock_1wk     <- df_stocking %>%
filter(Date %in% '20251010_post_challenge') %>% # number per tank after the 44C exposure ad destructive sampling
select_if(~ !any(is.na(.))) %>% # keep the 12 relevant tanks (tanks that were not challenged did not have mortality)
select(!Note)
df_surv_1wk      <- df_raw %>%
filter(Date >= 20251010 & Date <= 20251016) %>% # when the 24 hour exposure started
select(c('Date', colnames(df_stock_1wk)[2:ncol(df_stock_1wk)]))
# start the loop
for(r in 1:nrow(df_surv_1wk))  { # for each row
loop.date <- df_surv_1wk[r,1] # get the date
for (c in 2:ncol(df_surv_1wk)) { # at each date... call tank columns one by one
# df_raw[c] <- as.numeric(df_raw[c]) # convert to numeric
tankID         <- colnames(df_surv_1wk[c])
starting_count <- (df_stock_1wk %>% dplyr::select(`tankID`))[1,1]
cumulative.sum <- cumsum(df_surv_1wk[c]) # culative sum of the entire column c
cum.count.dead   <- cumulative.sum[r,] # the cumulative count dead at loop.date row r, column c
daily.count.dead <- df_surv_1wk[r,c]
count.alive      <- starting_count - cum.count.dead # all tanks started with 20 individuals!
percent.survival <- (count.alive/starting_count)*100
tank.num         <- as.numeric(gsub('.*_', '', colnames(df_surv_1wk[c])))
loop_columns$Date         <- loop.date
loop_columns$Tank_number  <- tank.num
loop_columns$Treatment     <- "1 week recovery"
# if(tank.num == 1 | tank.num == 2 | tank.num == 3) {
#  loop_columns$Treatment = "60 minutes"
# } else if (tank.num == 4 | tank.num == 5 | tank.num == 6) {
#   loop_columns$Treatment = "120 minutes"
# } else if (tank.num == 7 | tank.num == 8 | tank.num == 9 | tank.num == 10) {
#   loop_columns$Treatment = "180 minutes"
# } else {
#   loop_columns$Treatment = "30 minutes"
# }
loop_columns$Count_Alive           <- count.alive
loop_columns$Count_Dead            <- cum.count.dead # cumulative sum of count dead
loop_columns$Daily_Count_Dead      <- daily.count.dead # cumulative sum of count dead
loop_columns$Percent_Survival      <- percent.survival
df_cols      <- rbind(df_cols,loop_columns) #bind to a cumulative list dataframe
# Note: df_cols now contains as many rows as there are tank IDs at the given date loop.date
} # close columns for each tank
df_out_1wk   <- rbind(df_out,df_cols)
df_cols      <- data.frame() # start columns over again, gets the next row (date) for te previous loop
print(df_out_1wk) # print to monitor progress
} # close rows for each date - output cumulative table row by row for each tank
df_out_1wk
# loop matrix, start this
loop_columns          <- data.frame(matrix(nrow = 1, ncol = 7))
colnames(loop_columns) <- c('Date', 'Tank_number', 'Treatment',
'Count_Alive', 'Count_Dead', 'Daily_Count_Dead', 'Percent_Survival') # names for comuns in the for loop
# output file from the for loops
df_cols <- data.frame()
df_out  <- data.frame() # output datafarme, start it here
# start the loop
for(r in 1:nrow(df_surv_1wk))  { # for each row
loop.date <- df_surv_1wk[r,1] # get the date
for (c in 2:ncol(df_surv_1wk)) { # at each date... call tank columns one by one
# df_raw[c] <- as.numeric(df_raw[c]) # convert to numeric
tankID         <- colnames(df_surv_1wk[c])
starting_count <- (df_stock_1wk %>% dplyr::select(`tankID`))[1,1]
cumulative.sum <- cumsum(df_surv_1wk[c]) # culative sum of the entire column c
cum.count.dead   <- cumulative.sum[r,] # the cumulative count dead at loop.date row r, column c
daily.count.dead <- df_surv_1wk[r,c]
count.alive      <- starting_count - cum.count.dead # all tanks started with 20 individuals!
percent.survival <- (count.alive/starting_count)*100
tank.num         <- as.numeric(gsub('.*_', '', colnames(df_surv_1wk[c])))
loop_columns$Date         <- loop.date
loop_columns$Tank_number  <- tank.num
loop_columns$Treatment     <- "1 week recovery"
# if(tank.num == 1 | tank.num == 2 | tank.num == 3) {
#  loop_columns$Treatment = "60 minutes"
# } else if (tank.num == 4 | tank.num == 5 | tank.num == 6) {
#   loop_columns$Treatment = "120 minutes"
# } else if (tank.num == 7 | tank.num == 8 | tank.num == 9 | tank.num == 10) {
#   loop_columns$Treatment = "180 minutes"
# } else {
#   loop_columns$Treatment = "30 minutes"
# }
loop_columns$Count_Alive           <- count.alive
loop_columns$Count_Dead            <- cum.count.dead # cumulative sum of count dead
loop_columns$Daily_Count_Dead      <- daily.count.dead # cumulative sum of count dead
loop_columns$Percent_Survival      <- percent.survival
df_cols      <- rbind(df_cols,loop_columns) #bind to a cumulative list dataframe
# Note: df_cols now contains as many rows as there are tank IDs at the given date loop.date
} # close columns for each tank
df_out_1wk   <- rbind(df_out,df_cols)
df_cols      <- data.frame() # start columns over again, gets the next row (date) for te previous loop
print(df_out_1wk) # print to monitor progress
} # close rows for each date - output cumulative table row by row for each tank
df_out_1wk
# output file from the for loops
df_cols <- data.frame()
df_out_1wk  <- data.frame() # output datafarme, start it here
# start the loop
for(r in 1:nrow(df_surv_1wk))  { # for each row
loop.date <- df_surv_1wk[r,1] # get the date
for (c in 2:ncol(df_surv_1wk)) { # at each date... call tank columns one by one
# df_raw[c] <- as.numeric(df_raw[c]) # convert to numeric
tankID         <- colnames(df_surv_1wk[c])
starting_count <- (df_stock_1wk %>% dplyr::select(`tankID`))[1,1]
cumulative.sum <- cumsum(df_surv_1wk[c]) # culative sum of the entire column c
cum.count.dead   <- cumulative.sum[r,] # the cumulative count dead at loop.date row r, column c
daily.count.dead <- df_surv_1wk[r,c]
count.alive      <- starting_count - cum.count.dead # all tanks started with 20 individuals!
percent.survival <- (count.alive/starting_count)*100
tank.num         <- as.numeric(gsub('.*_', '', colnames(df_surv_1wk[c])))
loop_columns$Date         <- loop.date
loop_columns$Tank_number  <- tank.num
loop_columns$Treatment     <- "1 week recovery"
# if(tank.num == 1 | tank.num == 2 | tank.num == 3) {
#  loop_columns$Treatment = "60 minutes"
# } else if (tank.num == 4 | tank.num == 5 | tank.num == 6) {
#   loop_columns$Treatment = "120 minutes"
# } else if (tank.num == 7 | tank.num == 8 | tank.num == 9 | tank.num == 10) {
#   loop_columns$Treatment = "180 minutes"
# } else {
#   loop_columns$Treatment = "30 minutes"
# }
loop_columns$Count_Alive           <- count.alive
loop_columns$Count_Dead            <- cum.count.dead # cumulative sum of count dead
loop_columns$Daily_Count_Dead      <- daily.count.dead # cumulative sum of count dead
loop_columns$Percent_Survival      <- percent.survival
df_cols      <- rbind(df_cols,loop_columns) #bind to a cumulative list dataframe
# Note: df_cols now contains as many rows as there are tank IDs at the given date loop.date
} # close columns for each tank
df_out_1wk   <- rbind(df_out_1wk,df_cols)
df_cols      <- data.frame() # start columns over again, gets the next row (date) for te previous loop
print(df_out_1wk) # print to monitor progress
} # close rows for each date - output cumulative table row by row for each tank
df_out_1wk
# loop matrix, start this
loop_columns          <- data.frame(matrix(nrow = 1, ncol = 7))
colnames(loop_columns) <- c('Date', 'Tank_number', 'Treatment',
'Count_Alive', 'Count_Dead', 'Daily_Count_Dead', 'Percent_Survival') # names for comuns in the for loop
# output file from the for loops
df_cols      <- data.frame()
df_out_3wks  <- data.frame() # output datafarme, start it here
# start the loop
for(r in 1:nrow(df_surv_3wk))  { # for each row
loop.date <- df_surv_3wk[r,1] # get the date
for (c in 2:ncol(df_surv_3wk)) { # at each date... call tank columns one by one
# df_raw[c] <- as.numeric(df_raw[c]) # convert to numeric
tankID         <- colnames(df_surv_3wk[c])
starting_count <- (df_stock_3wk %>% dplyr::select(`tankID`))[1,1]
cumulative.sum <- cumsum(df_surv_3wk[c]) # culative sum of the entire column c
cum.count.dead   <- cumulative.sum[r,] # the cumulative count dead at loop.date row r, column c
daily.count.dead <- df_surv_3wk[r,c]
count.alive      <- starting_count - cum.count.dead # all tanks started with 20 individuals!
percent.survival <- (count.alive/starting_count)*100
tank.num         <- as.numeric(gsub('.*_', '', colnames(df_surv_3wk[c])))
loop_columns$Date         <- loop.date
loop_columns$Tank_number  <- tank.num
loop_columns$Treatment     <- "3 weeks recovery"
# if(tank.num == 1 | tank.num == 2 | tank.num == 3) {
#  loop_columns$Treatment = "60 minutes"
# } else if (tank.num == 4 | tank.num == 5 | tank.num == 6) {
#   loop_columns$Treatment = "120 minutes"
# } else if (tank.num == 7 | tank.num == 8 | tank.num == 9 | tank.num == 10) {
#   loop_columns$Treatment = "180 minutes"
# } else {
#   loop_columns$Treatment = "30 minutes"
# }
loop_columns$Count_Alive           <- count.alive
loop_columns$Count_Dead            <- cum.count.dead # cumulative sum of count dead
loop_columns$Daily_Count_Dead      <- daily.count.dead # cumulative sum of count dead
loop_columns$Percent_Survival      <- percent.survival
df_cols      <- rbind(df_cols,loop_columns) #bind to a cumulative list dataframe
# Note: df_cols now contains as many rows as there are tank IDs at the given date loop.date
} # close columns for each tank
df_out_3wks  <- rbind(df_out_3wks,df_cols)
df_cols      <- data.frame() # start columns over again, gets the next row (date) for te previous loop
print(df_out_3wks) # print to monitor progress
} # close rows for each date - output cumulative table row by row for each tank
# View(df_out)
df_1week_complete <- merge(df_out_1wk, df_metadata, by = 'Tank_number')
df_1week_complete$Prime_treatment <-  factor(df_1week_complete$Prime_treatmen, levels = c("0_hours", "6_hours", "24_hours", "72_hours"))
# View(df_1week_complete)
SummaryStats <- summarySE(df_1week_complete, measurevar="Percent_Survival", groupvars=c("Prime_treatment", "Date")) %>%
dplyr::mutate(Day =
case_when(Date %in% 20251010 ~ 0,
Date %in% 20251011 ~ 1,
Date %in% 20251012 ~ 2,
Date %in% 20251013 ~ 3,
Date %in% 20251014 ~ 4,
Date %in% 20251015 ~ 5))
# plot relative to 100$% restart at D stage
PlotMeanSE <-  ggplot(SummaryStats, aes(x=Day, y=Percent_Survival, color=Prime_treatment)) + geom_line()+
geom_point(position=position_dodge(.1))+
geom_errorbar(aes(ymin=Percent_Survival-se,
ymax=Percent_Survival+se), width=.2,
position=position_dodge(.1)) +
scale_color_manual(values = c("darkgreen","orange","darkorange2","darkred")) +
theme(legend.position="right", legend.direction="vertical",
legend.title = element_blank())+ theme_bw() +
labs(x="Day", y="Percent Survival")+ #scale_y_continuous(breaks=seq(0,100,20))+
ggtitle("") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
PlotMeanSE
df_3weeks_complete <- merge(df_out_3wks, df_metadata, by = 'Tank_number')
df_3weeks_complete$Prime_treatment <-  factor(df_3weeks_complete$Prime_treatmen, levels = c("0_hours", "6_hours", "24_hours", "72_hours"))
# View(df_1week_complete)
SummaryStats_3wks <- summarySE(df_3weeks_complete, measurevar="Percent_Survival",
groupvars=c("Prime_treatment", "Date")) %>%
dplyr::mutate(Day =
case_when(Date %in% 20251024 ~ 0,
Date %in% 20251025 ~ 1#,
# Date %in% 20251026 ~ 2,
# Date %in% 20251027 ~ 3,
# Date %in% 20251028 ~ 4,
# Date %in% 20251029 ~ 5
))
# plot relative to 100$% restart at D stage
PlotMeanSE <-  ggplot(SummaryStats_3wks, aes(x=Day, y=Percent_Survival, color=Prime_treatment)) + geom_line()+
geom_point(position=position_dodge(.1))+
geom_errorbar(aes(ymin=Percent_Survival-se,
ymax=Percent_Survival+se), width=.2,
position=position_dodge(.1)) +
scale_color_manual(values = c("darkgreen","orange","darkorange2","darkred")) +
theme(legend.position="right", legend.direction="vertical",
legend.title = element_blank())+ theme_bw() +
labs(x="Day", y="Percent Survival")+ #scale_y_continuous(breaks=seq(0,100,20))+
ggtitle("") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
PlotMeanSE
write.csv(SummaryStats_3wks,"Output/survival_3weeksrecovery_MeanSE.csv")
pdf("Output/survival_3weeksrecovery_MeanSE.pdf", width=10, height=5)
print(PlotMeanSE)
dev.off()
# create new columns for live and dead based on the count and proportion (of alive) tobackcalculate dead - these are integers!
df_KM_3wk <- df_3weeks_complete %>%
dplyr::mutate(Count_Alive =
as.numeric(gsub(",","",Count_Alive))) %>% # remove the commas from these numbers- id as character if not removed!
dplyr::mutate(proportion = Percent_Survival/100,
Count_total = case_when(proportion == 0 ~ 0,
proportion >0 ~
(1/as.numeric(proportion))*
as.numeric(Count_Alive)))# %>% # proportion is that of alive
# Call the cumulative dataframe that we will write to in the for loop below
df_binary_3weeks     <- data.frame() # start dataframe  - all
# run it
for (i in 1:nrow(df_KM_3wk)) {
#count_alive <- round(df_Exp2[i,]$Count_alive/100) # divide all counts by 1000, round to nearest
#count_dead  <- round(df_Exp2[i,]$Count_dead/100)  # divide all counts by 1000, round to nearest
count_alive <- round(df_KM_3wk[i,]$Count_Alive) # raw counts
count_dead  <- round(df_KM_3wk[i,]$Daily_Count_Dead)  # raw counts
loopDF           <- data.frame(matrix(0,ncol = 4, nrow = (count_alive + count_dead)))
colnames(loopDF) <- (c('Date','Treatment','Tank_number','Count_dead'))
loopDF           <- loopDF %>%
dplyr::mutate(
Treatment   = df_KM_3wk[i,]$Prime_treatment,
Tank_number = df_KM_3wk[i,]$Tank_number,
Date        = df_KM_3wk[i,]$Date)
loopDF[c(1:count_dead),4] = 1 # 1 for dead
loopDF[c((count_dead + 1):nrow(loopDF)),4] = 0 # 0 for alive
loopDF           <- data.frame(loopDF) # name dataframe for this single row
df_binary_3weeks <- rbind(df_binary_3weeks,loopDF) #bind to a cumulative list dataframe
}
df_binary_3weeks <- df_binary_3weeks %>% na.omit()
# Convert to Date class
dates_asDate <- as.Date(df_binary_3weeks$Date, format = "%Y%m%d")
# Find earliest date
earliest <- min(dates_asDate)
# Calculate number of days since earliest date
days_since_earliest <- as.numeric(dates_asDate - earliest)
#
df_binary_3weeks$Days <- as.numeric(days_since_earliest)
df_binary_3weeks
surv_3wks <- survfit2(Surv(Days, Count_dead) ~ Treatment, data = df_binary_3weeks)
KaplanMeier.plot_3wks <- surv_3wks %>%
ggsurvfit(linetype_aes = F, linewidth = 1,type ="survival") +
scale_color_manual(values = c("darkgreen","orange","darkorange2","darkred")) +
scale_fill_manual(values = c("darkgreen","orange","darkorange2","darkred")) +
labs(
x = "Days",
y = "Overall survival probability"
) +
add_confidence_interval() +
# add_risktable() +
# add_risktable_strata_symbol() + # (symbol = "\U25CF", size = 10
scale_ggsurvfit(x_scales = list(breaks = 0:10)) #+
KaplanMeier.plot_3wks
