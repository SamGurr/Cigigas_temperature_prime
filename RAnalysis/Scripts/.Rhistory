Count_dead = Count_total - Count_alive)
View(df_KM)
# Call the cumulative dataframe that we will write to in the for loop below
df_binary     <- data.frame() # start dataframe  - all
# run it
for (i in 1:nrow(df_KM)) {
#count_alive <- round(df_Exp2[i,]$Count_alive/100) # divide all counts by 1000, round to nearest
#count_dead  <- round(df_Exp2[i,]$Count_dead/100)  # divide all counts by 1000, round to nearest
count_alive <- round(df_KM[i,]$Count_alive) # raw counts
count_dead  <- round(df_KM[i,]$Count_dead)  # raw counts
loopDF           <- data.frame(matrix(0,ncol = 4, nrow = (count_alive + count_dead)))
colnames(loopDF) <- (c('Date','Treatment','Tank_number','Count_dead'))
loopDF           <- loopDF %>%
dplyr::mutate(
Treatment   = df_KM[i,]$Treatment,
Tank_number = df_KM[i,]$Tank_number,
Date        = df_KM[i,]$Date)
loopDF[c(1:count_dead),4] = 1 # 1 for dead
loopDF[c((count_dead + 1):nrow(loopDF)),4] = 0 # 0 for alive
loopDF           <- data.frame(loopDF) # name dataframe for this single row
df_binary <- rbind(df_binary,loopDF) #bind to a cumulative list dataframe
}
df_binary <- df_binary %>% na.omit()
View(df_binary)
# Convert to Date class
dates_asDate <- as.Date(df_binary$Date, format = "%Y%m%d")
# Find earliest date
earliest <- min(dates_asDate)
# Calculate number of days since earliest date
days_since_earliest <- as.numeric(dates_asDate - earliest)
#
df_binary$Days <- as.numeric(days_since_earliest)
surv_all <- survfit2(Surv(Days, Count_dead) ~ Treatment, data = df_binary)
KaplanMeier.plot <- surv_all %>%
ggsurvfit(linetype_aes = TRUE, linewidth = 1,type ="survival") +
scale_color_manual(values = c("lightgreen","turquoise","orange","darkred")) +
scale_fill_manual(values = c("lightgreen","turquoise","orange","darkred")) +
labs(
x = "Days",
y = "Overall survival probability"
) +
add_confidence_interval() +
# add_risktable() +
# add_risktable_strata_symbol() + # (symbol = "\U25CF", size = 10
scale_ggsurvfit(x_scales = list(breaks = 0:10)) #+
KaplanMeier.plot
View(df_out)
# create new columns for live and dead based on the count and proportion (of alive) tobackcalculate dead - these are integers!
df_KM <- df_out %>%
dplyr::mutate(Count =
as.numeric(gsub(",","",Count))) %>% # remove the commas from these numbers- id as character if not removed!
dplyr::rename(Count_alive = Count) %>% # rename to avoid confusion
dplyr::mutate(proportion = Percent_Survival/100,
Count_total = case_when(proportion == 0 ~ 0,
proportion >0 ~
(1/as.numeric(proportion))*
as.numeric(Count_alive)),# proportion is that of alive
Count_dead = Count_total - Count_alive)
View(df_KM)
df_raw[r,c]
# load the raw data, just the counts of dead individuals each day
df_raw       <- read.csv("Data/Lethal_temperature_test/survival_test.csv", header = T)
df_raw[df_raw == "all"] <- 0
df_raw <- df_raw %>% mutate_at(2:ncol(df_raw), ~as.numeric(as.character(.)))
# loop matrix, start this
loop_columns          <- data.frame(matrix(nrow = 1, ncol = 7))
colnames(loop_columns) <- c('Date', 'Tank_number', 'Treatment',
'Count_Alive', 'Daily_Count_Dead', 'Sum_Count_Dead', 'Percent_Survival') # names for comuns in the for loop
# loop matrix, start this
loop_columns          <- data.frame(matrix(nrow = 1, ncol = 7))
colnames(loop_columns) <- c('Date', 'Tank_number', 'Treatment',
'Count_Alive', 'Count_Dead', 'Daily_Count_Dead', 'Percent_Survival') # names for comuns in the for loop
# output file from the for loops
df_cols <- data.frame()
df_out  <- data.frame() # output datafarme, start it here
# start the loop
for(r in 1:nrow(df_raw))  { # for each row
loop.date <- df_raw[r,1] # get the date
for (c in 2:ncol(df_raw)) { # at each date... call tank columns one by one
# df_raw[c] <- as.numeric(df_raw[c]) # convert to numeric
cumulative.sum <- cumsum(df_raw[c]) # culative sum of the entire column c
cum.count.dead   <- cumulative.sum[r,] # the cumulative count dead at loop.date row r, column c
daily.count.dead <- df_raw[r,c]
count.alive      <- 20 - cum.count.dead # all tanks started with 20 individuals!
percent.survival <- (count.alive/20)*100
tank.num         <- as.numeric(gsub('.*_', '', colnames(df_raw[c])))
loop_columns$Date         <- loop.date
loop_columns$Tank_number  <- tank.num
if(tank.num == 1 | tank.num == 2 | tank.num == 3) {
loop_columns$Treatment = "60 minutes"
} else if (tank.num == 4 | tank.num == 5 | tank.num == 6) {
loop_columns$Treatment = "120 minutes"
} else if (tank.num == 7 | tank.num == 8 | tank.num == 9 | tank.num == 10) {
loop_columns$Treatment = "180 minutes"
} else {
loop_columns$Treatment = "30 minutes"
}
loop_columns$Count_Alive           <- count.alive
loop_columns$Count_Dead            <- cum.count.dead # cumulative sum of count dead
loop_columns$Daily_Count_Dead      <- daily.count.dead # cumulative sum of count dead
loop_columns$Percent_Survival      <- percent.survival
df_cols      <- rbind(df_cols,loop_columns) #bind to a cumulative list dataframe
# Note: df_cols now contains as many rows as there are tank IDs at the given date loop.date
} # close columns for each tank
df_out      <- rbind(df_out,df_cols)
df_cols      <- data.frame() # start columns over again, gets the next row (date) for te previous loop
print(df_out) # print to monitor progress
} # close rows for each date - output cumulative table row by row for each tank
View(df_out)
SummaryStats <- summarySE(df_out, measurevar="Percent_Survival", groupvars=c("Treatment", "Date"))
# plot relative to 100$% restart at D stage
PlotMeanSE <-  ggplot(SummaryStats, aes(x=Date, y=Percent_Survival, color=Treatment)) + geom_line()+
geom_point()+
geom_errorbar(aes(ymin=Percent_Survival-se,
ymax=Percent_Survival+se), width=.2,
position=position_dodge(.1)) +
# scale_color_manual(values=c("green4", "darkorange1", "purple"))+
theme(legend.position="right", legend.direction="vertical",
legend.title = element_blank())+ theme_bw() +
labs(x="Date", y="Percent Survival")+ #scale_y_continuous(breaks=seq(0,100,20))+
ggtitle("Survival following 44C exposure (under 20C)") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
PlotMeanSE
# create new columns for live and dead based on the count and proportion (of alive) tobackcalculate dead - these are integers!
df_KM <- df_out %>%
dplyr::mutate(Count =
as.numeric(gsub(",","",Count))) %>% # remove the commas from these numbers- id as character if not removed!
dplyr::rename(Count_alive = Count) %>% # rename to avoid confusion
dplyr::mutate(proportion = Percent_Survival/100,
Count_total = case_when(proportion == 0 ~ 0,
proportion >0 ~
(1/as.numeric(proportion))*
as.numeric(Count_alive)),# proportion is that of alive
Count_dead = Count_total - Count_alive)
# create new columns for live and dead based on the count and proportion (of alive) tobackcalculate dead - these are integers!
df_KM <- df_out %>%
dplyr::mutate(Count_Alive =
as.numeric(gsub(",","",Count_Alive))) %>% # remove the commas from these numbers- id as character if not removed!
dplyr::rename(Count_alive = Count) %>% # rename to avoid confusion
dplyr::mutate(proportion = Percent_Survival/100,
Count_total = case_when(proportion == 0 ~ 0,
proportion >0 ~
(1/as.numeric(proportion))*
as.numeric(Count_alive)),# proportion is that of alive
Count_dead = Count_total - Count_alive)
# create new columns for live and dead based on the count and proportion (of alive) tobackcalculate dead - these are integers!
df_KM <- df_out %>%
dplyr::mutate(Count_Alive =
as.numeric(gsub(",","",Count_Alive))) %>% # remove the commas from these numbers- id as character if not removed!
dplyr::mutate(proportion = Percent_Survival/100,
Count_total = case_when(proportion == 0 ~ 0,
proportion >0 ~
(1/as.numeric(proportion))*
as.numeric(Count_Alive)),# proportion is that of alive
Count_dead = Count_total - Count_Alive)
View(df_KM)
# create new columns for live and dead based on the count and proportion (of alive) tobackcalculate dead - these are integers!
df_KM <- df_out %>%
dplyr::mutate(Count_Alive =
as.numeric(gsub(",","",Count_Alive))) %>% # remove the commas from these numbers- id as character if not removed!
dplyr::mutate(proportion = Percent_Survival/100,
Count_total = case_when(proportion == 0 ~ 0,
proportion >0 ~
(1/as.numeric(proportion))*
as.numeric(Count_Alive)))# proportion is that of alive
#Count_dead = Count_total - Count_Alive)
View(df_KM)
# create new columns for live and dead based on the count and proportion (of alive) tobackcalculate dead - these are integers!
df_KM <- df_out %>%
dplyr::mutate(Count_Alive =
as.numeric(gsub(",","",Count_Alive))) %>% # remove the commas from these numbers- id as character if not removed!
dplyr::mutate(proportion = Percent_Survival/100,
Count_total = case_when(proportion == 0 ~ 0,
proportion >0 ~
(1/as.numeric(proportion))*
as.numeric(Count_Alive)))# proportion is that of alive
#Count_dead = Count_total - Count_Alive)
View(df_KM)
# Call the cumulative dataframe that we will write to in the for loop below
df_binary     <- data.frame() # start dataframe  - all
# run it
for (i in 1:nrow(df_KM)) {
#count_alive <- round(df_Exp2[i,]$Count_alive/100) # divide all counts by 1000, round to nearest
#count_dead  <- round(df_Exp2[i,]$Count_dead/100)  # divide all counts by 1000, round to nearest
Count_alive <- round(df_KM[i,]$Count_Alive) # raw counts
count_dead  <- round(df_KM[i,]$Daily_Count_Dead)  # raw counts
loopDF           <- data.frame(matrix(0,ncol = 4, nrow = (count_alive + count_dead)))
colnames(loopDF) <- (c('Date','Treatment','Tank_number','Count_dead'))
loopDF           <- loopDF %>%
dplyr::mutate(
Treatment   = df_KM[i,]$Treatment,
Tank_number = df_KM[i,]$Tank_number,
Date        = df_KM[i,]$Date)
loopDF[c(1:count_dead),4] = 1 # 1 for dead
loopDF[c((count_dead + 1):nrow(loopDF)),4] = 0 # 0 for alive
loopDF           <- data.frame(loopDF) # name dataframe for this single row
df_binary <- rbind(df_binary,loopDF) #bind to a cumulative list dataframe
}
df_binary <- df_binary %>% na.omit()
View(df_binary)
# Convert to Date class
dates_asDate <- as.Date(df_binary$Date, format = "%Y%m%d")
# Find earliest date
earliest <- min(dates_asDate)
# Calculate number of days since earliest date
days_since_earliest <- as.numeric(dates_asDate - earliest)
#
df_binary$Days <- as.numeric(days_since_earliest)
surv_all <- survfit2(Surv(Days, Count_dead) ~ Treatment, data = df_binary)
KaplanMeier.plot <- surv_all %>%
ggsurvfit(linetype_aes = TRUE, linewidth = 1,type ="survival") +
scale_color_manual(values = c("lightgreen","turquoise","orange","darkred")) +
scale_fill_manual(values = c("lightgreen","turquoise","orange","darkred")) +
labs(
x = "Days",
y = "Overall survival probability"
) +
add_confidence_interval() +
# add_risktable() +
# add_risktable_strata_symbol() + # (symbol = "\U25CF", size = 10
scale_ggsurvfit(x_scales = list(breaks = 0:10)) #+
KaplanMeier.plot
#Count_dead = Count_total - Count_Alive)
View(df_KM)
View(df_KM)
# create new columns for live and dead based on the count and proportion (of alive) tobackcalculate dead - these are integers!
df_KM <- df_out %>%
dplyr::mutate(Count_Alive =
as.numeric(gsub(",","",Count_Alive))) %>% # remove the commas from these numbers- id as character if not removed!
dplyr::mutate(proportion = Percent_Survival/100,
Count_total = case_when(proportion == 0 ~ 0,
proportion >0 ~
(1/as.numeric(proportion))*
as.numeric(Count_Alive))) %>% # proportion is that of alive
#Count_dead = Count_total - Count_Alive)
dplyr::filter(!proportion == 0.00) # omit rows where the number of live individuals is 0
View(df_KM)
# Call the cumulative dataframe that we will write to in the for loop below
df_binary     <- data.frame() # start dataframe  - all
# run it
for (i in 1:nrow(df_KM)) {
#count_alive <- round(df_Exp2[i,]$Count_alive/100) # divide all counts by 1000, round to nearest
#count_dead  <- round(df_Exp2[i,]$Count_dead/100)  # divide all counts by 1000, round to nearest
Count_alive <- round(df_KM[i,]$Count_Alive) # raw counts
count_dead  <- round(df_KM[i,]$Daily_Count_Dead)  # raw counts
loopDF           <- data.frame(matrix(0,ncol = 4, nrow = (count_alive + count_dead)))
colnames(loopDF) <- (c('Date','Treatment','Tank_number','Count_dead'))
loopDF           <- loopDF %>%
dplyr::mutate(
Treatment   = df_KM[i,]$Treatment,
Tank_number = df_KM[i,]$Tank_number,
Date        = df_KM[i,]$Date)
loopDF[c(1:count_dead),4] = 1 # 1 for dead
loopDF[c((count_dead + 1):nrow(loopDF)),4] = 0 # 0 for alive
loopDF           <- data.frame(loopDF) # name dataframe for this single row
df_binary <- rbind(df_binary,loopDF) #bind to a cumulative list dataframe
}
df_binary <- df_binary %>% na.omit()
View(df_binary)
# Convert to Date class
dates_asDate <- as.Date(df_binary$Date, format = "%Y%m%d")
# Find earliest date
earliest <- min(dates_asDate)
# Calculate number of days since earliest date
days_since_earliest <- as.numeric(dates_asDate - earliest)
#
df_binary$Days <- as.numeric(days_since_earliest)
KaplanMeier.plot <- surv_all %>%
ggsurvfit(linetype_aes = TRUE, linewidth = 1,type ="survival") +
scale_color_manual(values = c("lightgreen","turquoise","orange","darkred")) +
scale_fill_manual(values = c("lightgreen","turquoise","orange","darkred")) +
labs(
x = "Days",
y = "Overall survival probability"
) +
add_confidence_interval() +
# add_risktable() +
# add_risktable_strata_symbol() + # (symbol = "\U25CF", size = 10
scale_ggsurvfit(x_scales = list(breaks = 0:10)) #+
KaplanMeier.plot
df_binary
surv_all <- survfit2(Surv(Days, Count_dead) ~ Treatment, data = df_binary)
View(df_binary)
# create new columns for live and dead based on the count and proportion (of alive) tobackcalculate dead - these are integers!
df_KM <- df_out %>%
dplyr::mutate(Count_Alive =
as.numeric(gsub(",","",Count_Alive))) %>% # remove the commas from these numbers- id as character if not removed!
dplyr::mutate(proportion = Percent_Survival/100,
Count_total = case_when(proportion == 0 ~ 0,
proportion >0 ~
(1/as.numeric(proportion))*
as.numeric(Count_Alive)))  # # proportion is that of alive
```{r KM data}
# create new columns for live and dead based on the count and proportion (of alive) tobackcalculate dead - these are integers!
df_KM <- df_out %>%
dplyr::mutate(Count_Alive =
as.numeric(gsub(",","",Count_Alive))) %>% # remove the commas from these numbers- id as character if not removed!
dplyr::mutate(proportion = Percent_Survival/100,
Count_total = case_when(proportion == 0 ~ 0,
proportion >0 ~
(1/as.numeric(proportion))*
as.numeric(Count_Alive)))# %>% # proportion is that of alive
View(df_KM)
# create new columns for live and dead based on the count and proportion (of alive) tobackcalculate dead - these are integers!
df_KM <- df_out %>%
dplyr::mutate(Count_Alive =
as.numeric(gsub(",","",Count_Alive))) %>% # remove the commas from these numbers- id as character if not removed!
dplyr::mutate(proportion = Percent_Survival/100,
Count_total = case_when(proportion == 0 ~ 0,
proportion >0 ~
(1/as.numeric(proportion))*
as.numeric(Count_Alive)))# %>% # proportion is that of alive
View(df_KM)
# Call the cumulative dataframe that we will write to in the for loop below
df_binary     <- data.frame() # start dataframe  - all
# run it
for (i in 1:nrow(df_KM)) {
#count_alive <- round(df_Exp2[i,]$Count_alive/100) # divide all counts by 1000, round to nearest
#count_dead  <- round(df_Exp2[i,]$Count_dead/100)  # divide all counts by 1000, round to nearest
Count_alive <- round(df_KM[i,]$Count_Alive) # raw counts
count_dead  <- round(df_KM[i,]$Count_Dead)  # raw counts
loopDF           <- data.frame(matrix(0,ncol = 4, nrow = (count_alive + count_dead)))
colnames(loopDF) <- (c('Date','Treatment','Tank_number','Count_dead'))
loopDF           <- loopDF %>%
dplyr::mutate(
Treatment   = df_KM[i,]$Treatment,
Tank_number = df_KM[i,]$Tank_number,
Date        = df_KM[i,]$Date)
loopDF[c(1:count_dead),4] = 1 # 1 for dead
loopDF[c((count_dead + 1):nrow(loopDF)),4] = 0 # 0 for alive
loopDF           <- data.frame(loopDF) # name dataframe for this single row
df_binary <- rbind(df_binary,loopDF) #bind to a cumulative list dataframe
}
df_binary <- df_binary %>% na.omit()
View(df_binary)
loopDF[c(1:count_dead),4] = 1
loopDF[c(1:count_dead),4]
loopDF[c((count_dead + 1):nrow(loopDF)),4]
# Call the cumulative dataframe that we will write to in the for loop below
df_binary     <- data.frame() # start dataframe  - all
# run it
for (i in 1:nrow(df_KM)) {
#count_alive <- round(df_Exp2[i,]$Count_alive/100) # divide all counts by 1000, round to nearest
#count_dead  <- round(df_Exp2[i,]$Count_dead/100)  # divide all counts by 1000, round to nearest
Count_alive <- round(df_KM[i,]$Count_Alive) # raw counts
count_dead  <- round(df_KM[i,]$Count_Dead)  # raw counts
loopDF           <- data.frame(matrix(0,ncol = 4, nrow = (count_alive + count_dead)))
colnames(loopDF) <- (c('Date','Treatment','Tank_number','Count_dead'))
loopDF           <- loopDF %>%
dplyr::mutate(
Treatment   = df_KM[i,]$Treatment,
Tank_number = df_KM[i,]$Tank_number,
Date        = df_KM[i,]$Date)
loopDF[c(1:count_dead),4] = 1 # 1 for dead
loopDF[c((count_dead + 1):nrow(loopDF)),4] = 0 # 0 for alive
loopDF           <- data.frame(loopDF) # name dataframe for this single row
df_binary <- rbind(df_binary,loopDF) #bind to a cumulative list dataframe
}
df_binary <- df_binary %>% na.omit()
View(df_binary)
df_KM
df_KM
count_dead
count_dead
nrow(loopDF)
count_dead
df_KM
Count_alive <- round(df_KM[126,]$Count_Alive) # raw counts
count_dead  <- round(df_KM[126,]$Count_Dead)  # raw counts
Count_alive
count_dead
loopDF           <- data.frame(matrix(0,ncol = 4, nrow = (count_alive + count_dead)))
loopDF
count_dead
count_alive
count_dead
Count_alive
Count_alive <- round(df_KM[126,]$Count_Alive) # raw counts
count_alive
# Call the cumulative dataframe that we will write to in the for loop below
df_binary     <- data.frame() # start dataframe  - all
# run it
for (i in 1:nrow(df_KM)) {
#count_alive <- round(df_Exp2[i,]$Count_alive/100) # divide all counts by 1000, round to nearest
#count_dead  <- round(df_Exp2[i,]$Count_dead/100)  # divide all counts by 1000, round to nearest
count_alive <- round(df_KM[i,]$Count_Alive) # raw counts
count_dead  <- round(df_KM[i,]$Count_Dead)  # raw counts
loopDF           <- data.frame(matrix(0,ncol = 4, nrow = (count_alive + count_dead)))
colnames(loopDF) <- (c('Date','Treatment','Tank_number','Count_dead'))
loopDF           <- loopDF %>%
dplyr::mutate(
Treatment   = df_KM[i,]$Treatment,
Tank_number = df_KM[i,]$Tank_number,
Date        = df_KM[i,]$Date)
loopDF[c(1:count_dead),4] = 1 # 1 for dead
loopDF[c((count_dead + 1):nrow(loopDF)),4] = 0 # 0 for alive
loopDF           <- data.frame(loopDF) # name dataframe for this single row
df_binary <- rbind(df_binary,loopDF) #bind to a cumulative list dataframe
}
df_binary <- df_binary %>% na.omit()
View(df_binary)
loopDF           <- loopDF %>%
dplyr::mutate(
Treatment   = df_KM[i,]$Treatment,
Tank_number = df_KM[i,]$Tank_number,
Date        = df_KM[i,]$Date)
# Call the cumulative dataframe that we will write to in the for loop below
df_binary     <- data.frame() # start dataframe  - all
# run it
for (i in 1:nrow(df_KM)) {
#count_alive <- round(df_Exp2[i,]$Count_alive/100) # divide all counts by 1000, round to nearest
#count_dead  <- round(df_Exp2[i,]$Count_dead/100)  # divide all counts by 1000, round to nearest
count_alive <- round(df_KM[i,]$Count_Alive) # raw counts
count_dead  <- round(df_KM[i,]$Count_Dead)  # raw counts
loopDF           <- data.frame(matrix(0,ncol = 4, nrow = (count_alive + count_dead)))
colnames(loopDF) <- (c('Date','Treatment','Tank_number','Count_dead'))
loopDF           <- loopDF %>%
dplyr::mutate(
Treatment   = df_KM[i,]$Treatment,
Tank_number = df_KM[i,]$Tank_number,
Date        = df_KM[i,]$Date)
loopDF[c(1:count_dead),4] = 1 # 1 for dead
loopDF[c((count_dead + 1):nrow(loopDF)),4] = 0 # 0 for alive
loopDF           <- data.frame(loopDF) # name dataframe for this single row
df_binary <- rbind(df_binary,loopDF) #bind to a cumulative list dataframe
}
df_binary <- df_binary %>% na.omit()
# Convert to Date class
dates_asDate <- as.Date(df_binary$Date, format = "%Y%m%d")
# Find earliest date
earliest <- min(dates_asDate)
# Calculate number of days since earliest date
days_since_earliest <- as.numeric(dates_asDate - earliest)
#
df_binary$Days <- as.numeric(days_since_earliest)
surv_all <- survfit2(Surv(Days, Count_dead) ~ Treatment, data = df_binary)
KaplanMeier.plot <- surv_all %>%
ggsurvfit(linetype_aes = TRUE, linewidth = 1,type ="survival") +
scale_color_manual(values = c("lightgreen","turquoise","orange","darkred")) +
scale_fill_manual(values = c("lightgreen","turquoise","orange","darkred")) +
labs(
x = "Days",
y = "Overall survival probability"
) +
add_confidence_interval() +
# add_risktable() +
# add_risktable_strata_symbol() + # (symbol = "\U25CF", size = 10
scale_ggsurvfit(x_scales = list(breaks = 0:10)) #+
KaplanMeier.plot
# Call the cumulative dataframe that we will write to in the for loop below
df_binary     <- data.frame() # start dataframe  - all
# run it
for (i in 1:nrow(df_KM)) {
#count_alive <- round(df_Exp2[i,]$Count_alive/100) # divide all counts by 1000, round to nearest
#count_dead  <- round(df_Exp2[i,]$Count_dead/100)  # divide all counts by 1000, round to nearest
count_alive <- round(df_KM[i,]$Count_Alive) # raw counts
count_dead  <- round(df_KM[i,]$Daily_Count_Dead)  # raw counts
loopDF           <- data.frame(matrix(0,ncol = 4, nrow = (count_alive + count_dead)))
colnames(loopDF) <- (c('Date','Treatment','Tank_number','Count_dead'))
loopDF           <- loopDF %>%
dplyr::mutate(
Treatment   = df_KM[i,]$Treatment,
Tank_number = df_KM[i,]$Tank_number,
Date        = df_KM[i,]$Date)
loopDF[c(1:count_dead),4] = 1 # 1 for dead
loopDF[c((count_dead + 1):nrow(loopDF)),4] = 0 # 0 for alive
loopDF           <- data.frame(loopDF) # name dataframe for this single row
df_binary <- rbind(df_binary,loopDF) #bind to a cumulative list dataframe
}
df_binary <- df_binary %>% na.omit()
# Convert to Date class
dates_asDate <- as.Date(df_binary$Date, format = "%Y%m%d")
# Find earliest date
earliest <- min(dates_asDate)
# Calculate number of days since earliest date
days_since_earliest <- as.numeric(dates_asDate - earliest)
#
df_binary$Days <- as.numeric(days_since_earliest)
surv_all <- survfit2(Surv(Days, Count_dead) ~ Treatment, data = df_binary)
KaplanMeier.plot <- surv_all %>%
ggsurvfit(linetype_aes = TRUE, linewidth = 1,type ="survival") +
scale_color_manual(values = c("lightgreen","turquoise","orange","darkred")) +
scale_fill_manual(values = c("lightgreen","turquoise","orange","darkred")) +
labs(
x = "Days",
y = "Overall survival probability"
) +
add_confidence_interval() +
# add_risktable() +
# add_risktable_strata_symbol() + # (symbol = "\U25CF", size = 10
scale_ggsurvfit(x_scales = list(breaks = 0:10)) #+
KaplanMeier.plot
# plot the surv data
pdf("Output/survival_test_KaplanMeier.pdf", width=5, height = 4)
KaplanMeier.plot
dev.off()
KaplanMeier.plot
# modified for personal Lenovo PC at PT Whitney summer 2018
# last modification on 20180629 by SJG
setwd("C:\Users/samjg/Documents/My_Projects/Juvenile_geoduck_OA/RAnalysis/Data/Chemistry.flow/pH_Calibration_Files") #set working directory
# modified for personal Lenovo PC at PT Whitney summer 2018
# last modification on 20180629 by SJG
setwd("C:\Users/samjg/Documents/My_Projects/Juvenile_geoduck_OA/RAnalysis/Data/Chemistry.flow/pH_Calibration_Files") #set working directory
# modified for personal Lenovo PC at PT Whitney summer 2018
# last modification on 20180629 by SJG
setwd("C:/Users/samjg/Documents/My_Projects/Juvenile_geoduck_OA/RAnalysis/Data/Chemistry.flow/pH_Calibration_Files") #set working directory
# modified for personal Lenovo PC at PT Whitney summer 2018
# last modification on 20180629 by SJG
setwd("C:\Users/samjg/Documents/My_Projects/Juvenile_geoduck_OA/RAnalysis/Data/Chemistry.flow/pH_Calibration_Files") #set working directory
